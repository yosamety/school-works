package ass2;

import java.net.*;
import java.util.*;
import java.io.*;

public class Client {
	public static void main(String[] args) throws IOException {

		int request = 0;
		int namePort = 0;
		DatagramSocket clientSocket = new DatagramSocket();

		// check number of arguments
		if (args.length != 2) {
			System.err.print("Invalid command line arguments\n");
			System.exit(1);
		}
		// check arguments type
		try {
			request = Integer.parseInt(args[0]);
			namePort = Integer.parseInt(args[1]);
		} catch (NumberFormatException e) {
			System.err.println("Invalid command line arguments\n");
			System.exit(1);
		}

//		// open socket to contact name server
//		Socket nameSocket = null;
//		PrintWriter outName = null;
//		BufferedReader inName = null;
//
//		try {
//			// Connect to the process listening on namePort on this host
//			// (localhost)
//			nameSocket = new Socket("127.0.0.1", namePort);
//			outName = new PrintWriter(nameSocket.getOutputStream(), true);
//			// "true" means flush at end of line
//			inName = new BufferedReader(new InputStreamReader(
//					nameSocket.getInputStream()));
//		} catch (Exception e) {
//			System.err.print("Client unable to connect with NameServer\n");
//			e.printStackTrace();
//
//		}
//		// send lookup request to name server for store
//		outName.println("l Store");
//		// Wait for a reply
//		String reply = inName.readLine();
//		int storePort = 0;
//		String ipStore = null;
//		List<String> StoreData = new ArrayList<String>();
//		if (reply != "Error: Process has not registered with the Name Server\n") {
//			String[] splitted = reply.split("\\s+");
//			storePort = Integer.parseInt(splitted[0]);
//			ipStore = splitted[1];
//
//		} else {
//			System.err.print("Client unable to connect with NameServer\n");
//			System.exit(1);
//		}
//		outName.close();
//		inName.close();
//		nameSocket.close();

		InetAddress IPAddress = InetAddress.getByName("127.0.0.1");
		// send look up for store
		byte[] sendDatals = new byte[1024];
		byte[] receiveDatals = new byte[1024];
		// send lookup request to name server for bank
		//outName.println("l Bank");
		String ls = "l Store";
		sendDatals = ls.getBytes();
		DatagramPacket sendPacketls = new DatagramPacket(sendDatals, sendDatals.length, IPAddress, namePort);
		clientSocket.send(sendPacketls);
		// Wait for a reply
		DatagramPacket receivePacketls = new DatagramPacket(receiveDatals,
				receiveDatals.length);
		clientSocket.receive(receivePacketls);
		
				
		String replyls = new String(receivePacketls.getData());
		
		replyls = replyls.substring(0, receivePacketls.getLength());
		int storePort = 0;
		String ipStore = null;
		//List<String> StoreData = new ArrayList<String>();
		//String reply2 = inName.readLine();
		System.err.println(replyls);
		if (replyls != "Error: Process has not registered with the Name Server\n") {
			String[] splitted = replyls.split("\\s+");
			storePort = Integer.parseInt(splitted[0]);
			ipStore = splitted[1];

		} else {
			System.err.print("Client unable to connect with NameServer\n");
			System.exit(1);
		}
		
		
//		Socket storeSocket = null;
//		PrintWriter outStore = null;
//		BufferedReader inStore = null;
//		try {
//			// Connect to the process listening on namePort on this host
//			// (localhost)
//			storeSocket = new Socket(ipStore, storePort);
//			outStore = new PrintWriter(storeSocket.getOutputStream(), true);
//			// "true" means flush at end of line
//			inStore = new BufferedReader(new InputStreamReader(
//					nameSocket.getInputStream()));
//		} catch (Exception e) {
//			System.err.print("Client unable to connect with Store\n");
//			e.printStackTrace();
//
//		}
		byte[] sendDatacs = new byte[1024];
		byte[] receiveDatacs = new byte[1024];
		String creditcard = "1234567890123456";
		if (request == 0) {
			String cs = args[0];
			sendDatacs = cs.getBytes();
			DatagramPacket sendPacketcs = new DatagramPacket(sendDatacs, sendDatacs.length, IPAddress, storePort);
			clientSocket.send(sendPacketcs);
			//outStore.println(args[0]);
		} else {
			String cs = args[0] + " " + creditcard;
			sendDatacs = cs.getBytes();
			DatagramPacket sendPacketcs = new DatagramPacket(sendDatacs, sendDatacs.length, IPAddress, storePort);
			clientSocket.send(sendPacketcs);
			//outStore.println(args[0] + " " + creditcard);
		}
		// Wait for a reply
				DatagramPacket receivePacketcs = new DatagramPacket(receiveDatacs,
						receiveDatacs.length);
				clientSocket.receive(receivePacketcs);
				
						
				String replycs = new String(receivePacketcs.getData());
				
				replycs = replycs.substring(0, receivePacketcs.getLength());
				System.out.println(replycs);
		// Wait for a reply
//		String storeReply;
//		while ((storeReply = inStore.readLine()) != null) {
//			System.out.println(storeReply);
//		}
//
//		outStore.close();
//		inStore.close();
//		storeSocket.close();
		System.exit(1);
		
	}

}
