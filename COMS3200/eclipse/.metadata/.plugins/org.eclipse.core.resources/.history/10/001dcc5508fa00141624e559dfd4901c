package ass2;

import java.net.*;
import java.util.*;
import java.io.*;

public class NameServer {
	@SuppressWarnings("resource")
	public static void main(String[] args) throws IOException {

		int portNum = 0;
		//ServerSocket serverSocket = null;
		DatagramSocket serverSocket = null;
				

		// check number of arguments
		if (args.length != 1) {
			System.err.print("Invalid command line arguments for NameServer\n");
			System.exit(1);
		}
		// check arguments type
		try {
			portNum = Integer.parseInt(args[0]);
		} catch (NumberFormatException e) {
			System.err
					.println("Invalid command line arguments for NameServer\n");
			System.exit(1);
		}

		// try to listen on portNum
		try {
			serverSocket = new DatagramSocket(portNum);
					//new ServerSocket(portNum);

		} catch (IOException e) {
			System.err.printf("Cannot listen on given port number %d\n",
					portNum);
			e.printStackTrace();
		}

		

		byte[] receiveData = new byte[1024];
		byte[] sendData = new byte[1024];
		
		// create map to store registers
		Map<String, List<String>> servers = new HashMap<String, List<String>>();
//		Socket connSocket = null;
		
		System.err.print("Name Server waiting for incoming connections …\n");
		while (true) {
			System.err.println("loop");
//			try {
//				// block, waiting for a conn. request
//				connSocket = serverSocket.accept();
//				// At this point, we have a connection
//
//			} catch (IOException e) {
//				e.printStackTrace();
//			}
//			// Now have a socket to use for communication
//			// Create a PrintWriter and BufferedReader for interaction with our
//			// stream "true" means we flush the stream on newline
//			PrintWriter out = new PrintWriter(connSocket.getOutputStream(),
//					true);
//			BufferedReader in = new BufferedReader(new InputStreamReader(
//					connSocket.getInputStream()));
//			String line;
//			// Read a line from the stream - until the stream closes
//			while ((line = in.readLine()) != null) {
//
//				// Perform the job of the server - split strign to an array
//				String[] message = line.split("\\s+");
//				List<String> serverDetails = new ArrayList<String>();
			
			//recive data
			DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
			serverSocket.receive(receivePacket);
			//make data string
			String msg = new String(receivePacket.getData());
			System.err.println("message= " + msg);
			String[] message = msg.split("\\s+");
			List<String> serverDetails = new ArrayList<String>();
			
			//get sender port
			InetAddress IPAddress = receivePacket.getAddress();
			int port = receivePacket.getPort();
			
				if (message[0].equals("r") && message.length == 4) {
					// register request
					// check message[2] is ip address
					// check message[3] is number
					serverDetails.add(message[2]);
					serverDetails.add(message[3]);
					servers.put(message[1], serverDetails);
					String rep = "registered\n";
					sendData = rep.getBytes();
					System.err.print("registered\n");//REMOVE THIS
					//System.out.println("registered");
				} else if (message[0].equals("l") && message.length == 2) {
					// lookup request
					if (servers.containsKey(message[1])) {
						String rep = (servers.get(message[1]).toString());
						sendData = rep.getBytes();
					} else {
						System.err.print("Error: Process has not registered with the Name Server\n");
						//String rep = "Error: Process has not registered with the Name Server\n";
						//sendData = rep.getBytes();
					}

				} else {
					System.err.print("Invalid request\n");
					break;
				}
				// send the message back to the client 
				DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);
				serverSocket.send(sendPacket);
			

//			out.close();
//			in.close();
//			connSocket.close();
		}

	}

}
