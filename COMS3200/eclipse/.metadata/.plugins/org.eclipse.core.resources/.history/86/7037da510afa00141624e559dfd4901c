package ass2;

import java.net.*;
import java.util.*;
import java.io.*;

public class Content {
	@SuppressWarnings("resource")
	public static void main(String[] args) throws IOException {

		int contentPort = 0;
		int namePort = 0;
		// ServerSocket serverSocket
		DatagramSocket contentSocket = null;
		DatagramSocket clientSocket = new DatagramSocket();

		// check number of arguments
		if (args.length != 3) {
			System.err.print("Invalid command line arguments for Content\n");
			System.exit(1);
		}
		// check arguments type
		try {
			contentPort = Integer.parseInt(args[0]);
			namePort = Integer.parseInt(args[2]);
		} catch (NumberFormatException e) {
			System.err.println("Content unable to listen on given port\n");
			System.exit(1);
		}

		// try to listen on contentPort
		try {
			// serverSocket = new ServerSocket(contentPort);
			contentSocket = new DatagramSocket(contentPort);
			System.err.print("Content waiting for incoming connections\n");
		} catch (IOException e) {
			System.err.print("Content unable to listen on given port\n");
			e.printStackTrace();
		}
		// set server's ip address
		InetAddress IPAddress = InetAddress.getByName("127.0.0.1");
		byte[] sendData = new byte[1024];
		byte[] receiveData = new byte[1024];
		// open socket to contact name server
		// Socket nameSocket = null;
		// PrintWriter outName = null;
		// BufferedReader inName = null;
		//
		// try {
		// // Connect to the process listening on namePort on this host
		// // (localhost)
		// nameSocket = new Socket("127.0.0.1", namePort);
		// outName = new PrintWriter(nameSocket.getOutputStream(), true);
		// // "true" means flush at end of line
		// inName = new BufferedReader(new InputStreamReader(
		// nameSocket.getInputStream()));
		// } catch (Exception e) {
		// e.printStackTrace();
		// }

		// send register request to name server
		// outName.println("r Content " + contentPort + " 127.0.0.1");
		String msg = "r Content " + contentPort + " 127.0.0.1";
		sendData = msg.getBytes();
		// send the message to server
		DatagramPacket sendPacket = new DatagramPacket(sendData,
				sendData.length, IPAddress, namePort);
		clientSocket.send(sendPacket);
		// receive reply message from server
		DatagramPacket receivePacket = new DatagramPacket(receiveData,
				receiveData.length);
		clientSocket.receive(receivePacket);
		
				
		String reply = new String(receivePacket.getData());
		
		reply = reply.substring(0, receivePacket.getLength());
		System.err.println("reply= "+reply+"end\n length="+ receivePacket.getLength());
		
		// inName.readLine();
		if (!reply.equals("registered")) {
			
			System.err.print("Content registration with NameServer failed\n");
			System.exit(1);
		}
		// outName.close();
		// inName.close();
		// nameSocket.close();
		File file = new File(".");
		for(String fileNames : file.list()) System.out.println(fileNames);
		// read content file
		Map<String, String> contentData = new HashMap<String, String>();
		// Open the file
		FileInputStream fstream = new FileInputStream(args[1]);
		BufferedReader br = new BufferedReader(new InputStreamReader(fstream));

		String strLine;

		// Read File Line By Line
		while ((strLine = br.readLine()) != null) {
			String[] splitted = strLine.split("\\s+");
			contentData.put(splitted[0], splitted[1]);
		}

		// Close the input stream
		br.close();

		//Socket connSocket = null;
		// start listening
		while (true) {
			// try {
			// // block, waiting for a conn. request
			// //connSocket = serverSocket.accept();
			// // At this point, we have a connection
			//
			// } catch (IOException e) {
			// e.printStackTrace();
			// }
			// // Now have a socket to use for communication
			// // Create a PrintWriter and BufferedReader for interaction with
			// our stream "true" means we flush the stream on newline
			// PrintWriter outContent = new
			// PrintWriter(connSocket.getOutputStream(), true);
			// BufferedReader inContent = new BufferedReader(new
			// InputStreamReader(connSocket.getInputStream()));
			// String line;
			// // Read a line from the stream - until the stream closes
			// while ((line=inContent.readLine()) != null) {
			// String contentReply = contentData.get(line);
			// outContent.println(line + " " + contentReply);
			// }
			//
			//
			// outContent.close();
			// inContent.close();
			// connSocket.close();

			DatagramPacket receivePacket2 = new DatagramPacket(receiveData,
					receiveData.length);
			contentSocket.receive(receivePacket2);

			String msg2 = new String(receivePacket2.getData());
			String contentReply = contentData.get(msg2);

			// get the port of the client
			InetAddress IPAddress2 = receivePacket.getAddress();
			int port = receivePacket.getPort();

			sendData = contentReply.getBytes();
			// send the message back to the client
			DatagramPacket sendPacket2 = new DatagramPacket(sendData,
					sendData.length, IPAddress, port);
			contentSocket.send(sendPacket2);
		}

	}
}
